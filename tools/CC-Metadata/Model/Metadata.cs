// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: metadata.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CarbonCall.Metadata {

  /// <summary>Holder for reflection information generated from metadata.proto</summary>
  public static partial class MetadataReflection {

    #region Descriptor
    /// <summary>File descriptor for metadata.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MetadataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5tZXRhZGF0YS5wcm90bxITY2FyYm9uY2FsbC5tZXRhZGF0YSJoChRTdXN0",
            "YWluYWJpbGl0eVJlcG9ydBIPCgdnX3JfaV9kGAEgASgJEi8KCG1ldGFkYXRh",
            "GAIgASgLMh0uY2FyYm9uY2FsbC5tZXRhZGF0YS5NZXRhZGF0YRIOCgZyZXBv",
            "cnQYAyABKAkiwQYKCE1ldGFkYXRhEg8KB2dfcl9pX2QYASABKAkSHwoXb3Jn",
            "YW5pemF0aW9uX2lkZW50aWZpZXIYAiABKAkSGQoRb3JnYW5pemF0aW9uX25h",
            "bWUYAyABKAkSOgoIZG9taWNpbGUYBCABKA4yKC5jYXJib25jYWxsLm1ldGFk",
            "YXRhLklTTzMxNjZfQ291bnRyeUNvZGUSRQoTb3BlcmF0aW5nX2NvdW50cmll",
            "cxgFIAMoDjIoLmNhcmJvbmNhbGwubWV0YWRhdGEuSVNPMzE2Nl9Db3VudHJ5",
            "Q29kZRIwCglsYW5ndWFnZXMYBiADKA4yHS5jYXJib25jYWxsLm1ldGFkYXRh",
            "Lkxhbmd1YWdlEjQKC3JlcG9ydF90eXBlGAcgASgOMh8uY2FyYm9uY2FsbC5t",
            "ZXRhZGF0YS5SZXBvcnRUeXBlEhkKEXJlcG9ydF9pc3N1ZV9kYXRlGAggASgJ",
            "Ej4KEHJlcG9ydGluZ19wZXJpb2QYCSABKAsyJC5jYXJib25jYWxsLm1ldGFk",
            "YXRhLlJlcG9ydGluZ1BlcmlvZBIXCg9yZXBvcnRfcmVwbGFjZXMYCiABKAkS",
            "EAoIbG9jYXRpb24YCyABKAkSLwoIaW5kdXN0cnkYDCABKAsyHS5jYXJib25j",
            "YWxsLm1ldGFkYXRhLkluZHVzdHJ5EhMKC3BlcmZvcm1hbmNlGA0gASgJEjgK",
            "DXJlcG9ydF9mb3JtYXQYDiABKA4yIS5jYXJib25jYWxsLm1ldGFkYXRhLlJl",
            "cG9ydEZvcm1hdBJCChJyZXBvcnRpbmdfc3RhbmRhcmQYDyABKA4yJi5jYXJi",
            "b25jYWxsLm1ldGFkYXRhLlJlcG9ydGluZ1N0YW5kYXJkEhEKCWFzc3VyYW5j",
            "ZRgQIAEoCRIUCgxwcmlvcl9yZXBvcnQYESABKAkSEwoLcmVwb3J0X2hhc2gY",
            "EiABKAkSNAoOcmVwb3J0X2NvbnRleHQYEyADKAsyHC5jYXJib25jYWxsLm1l",
            "dGFkYXRhLk1ldGF0YWcSPwoRcHJvcGVydHlfY29udGV4dHMYFCADKAsyJC5j",
            "YXJib25jYWxsLm1ldGFkYXRhLlByb3BlcnR5Q29udGV4dCI3Cg9SZXBvcnRp",
            "bmdQZXJpb2QSEgoKc3RhcnRfZGF0ZRgBIAEoCRIQCghlbmRfZGF0ZRgCIAEo",
            "CSJRCghJbmR1c3RyeRI3CgZwcmVmaXgYASABKA4yJy5jYXJib25jYWxsLm1l",
            "dGFkYXRhLkluZHVzdHJ5Q29kZVByZWZpeBIMCgRjb2RlGAIgASgJIiUKB01l",
            "dGF0YWcSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJIlMKD1Byb3BlcnR5",
            "Q29udGV4dBIQCghwcm9wZXJ0eRgBIAEoCRIuCghtZXRhdGFncxgCIAMoCzIc",
            "LmNhcmJvbmNhbGwubWV0YWRhdGEuTWV0YXRhZyrdEgoTSVNPMzE2Nl9Db3Vu",
            "dHJ5Q29kZRILCgdVTktOT1dOEAASBwoDQV9GEAESBwoDQV9YEAISBwoDQV9M",
            "EAMSBwoDRF9aEAQSBwoDQV9TEAUSBwoDQV9EEAYSBwoDQV9PEAcSBwoDQV9J",
            "EAgSBwoDQV9REAkSBwoDQV9HEAoSBwoDQV9SEAsSBwoDQV9NEAwSBwoDQV9X",
            "EA0SBwoDQV9VEA4SBwoDQV9UEA8SBwoDQV9aEBASBwoDQl9TEBESBwoDQl9I",
            "EBISBwoDQl9EEBMSBwoDQl9CEBQSBwoDQl9ZEBUSBwoDQl9FEBYSBwoDQl9a",
            "EBcSBwoDQl9KEBgSBwoDQl9NEBkSBwoDQl9UEBoSBwoDQl9PEBsSBwoDQl9R",
            "EBwSBwoDQl9BEB0SBwoDQl9XEB4SBwoDQl9WEB8SBwoDQl9SECASBwoDSV9P",
            "ECESBwoDQl9OECISBwoDQl9HECMSBwoDQl9GECQSBwoDQl9JECUSBwoDQ19W",
            "ECYSBwoDS19IECcSBwoDQ19NECgSBwoDQ19BECkSBwoDS19ZECoSBwoDQ19G",
            "ECsSBwoDVF9EECwSBwoDQ19MEC0SBwoDQ19OEC4SBwoDQ19YEC8SBwoDQ19D",
            "EDASBwoDQ19PEDESBwoDS19NEDISBwoDQ19HEDMSBwoDQ19EEDQSBwoDQ19L",
            "EDUSBwoDQ19SEDYSBwoDQ19JEDcSBwoDSF9SEDgSBwoDQ19VEDkSBwoDQ19X",
            "EDoSBwoDQ19ZEDsSBwoDQ19aEDwSBwoDRF9LED0SBwoDRF9KED4SBwoDRF9N",
            "ED8SBwoDRF9PEEASBwoDRV9DEEESBwoDRV9HEEISBwoDU19WEEMSBwoDR19R",
            "EEQSBwoDRV9SEEUSBwoDRV9FEEYSBwoDRV9UEEcSBwoDRl9LEEgSBwoDRl9P",
            "EEkSBwoDRl9KEEoSBwoDRl9JEEsSBwoDRl9SEEwSBwoDR19GEE0SBwoDUF9G",
            "EE4SBwoDVF9GEE8SBwoDR19BEFASBwoDR19NEFESBwoDR19FEFISBwoDRF9F",
            "EFMSBwoDR19IEFQSBwoDR19JEFUSBwoDR19SEFYSBwoDR19MEFcSBwoDR19E",
            "EFgSBwoDR19QEFkSBwoDR19VEFoSBwoDR19UEFsSBwoDR19HEFwSBwoDR19O",
            "EF0SBwoDR19XEF4SBwoDR19ZEF8SBwoDSF9UEGASBwoDSF9NEGESBwoDVl9B",
            "EGISBwoDSF9OEGMSBwoDSF9LEGQSBwoDSF9VEGUSBwoDSV9TEGYSBwoDSV9O",
            "EGcSBwoDSV9EEGgSBwoDSV9SEGkSBwoDSV9REGoSBwoDSV9FEGsSBwoDSV9N",
            "EGwSBwoDSV9MEG0SBwoDSV9UEG4SBwoDSl9NEG8SBwoDSl9QEHASBwoDSl9F",
            "EHESBwoDSl9PEHISBwoDS19aEHMSBwoDS19FEHQSBwoDS19JEHUSBwoDS19Q",
            "EHYSBwoDS19SEHcSBwoDS19XEHgSBwoDS19HEHkSBwoDTF9BEHoSBwoDTF9W",
            "EHsSBwoDTF9CEHwSBwoDTF9TEH0SBwoDTF9SEH4SBwoDTF9ZEH8SCAoDTF9J",
            "EIABEggKA0xfVBCBARIICgNMX1UQggESCAoDTV9PEIMBEggKA01fSxCEARII",
            "CgNNX0cQhQESCAoDTV9XEIYBEggKA01fWRCHARIICgNNX1YQiAESCAoDTV9M",
            "EIkBEggKA01fVBCKARIICgNNX0gQiwESCAoDTV9REIwBEggKA01fUhCNARII",
            "CgNNX1UQjgESCAoDWV9UEI8BEggKA01fWBCQARIICgNGX00QkQESCAoDTV9E",
            "EJIBEggKA01fQxCTARIICgNNX04QlAESCAoDTV9FEJUBEggKA01fUxCWARII",
            "CgNNX0EQlwESCAoDTV9aEJgBEggKA01fTRCZARIICgNOX0EQmgESCAoDTl9S",
            "EJsBEggKA05fUBCcARIICgNOX0wQnQESCAoDTl9DEJ4BEggKA05fWhCfARII",
            "CgNOX0kQoAESCAoDTl9FEKEBEggKA05fRxCiARIICgNOX1UQowESCAoDTl9G",
            "EKQBEggKA01fUBClARIICgNOX08QpgESCAoDT19NEKcBEggKA1BfSxCoARII",
            "CgNQX1cQqQESCAoDUF9TEKoBEggKA1BfQRCrARIICgNQX0cQrAESCAoDUF9Z",
            "EK0BEggKA1BfRRCuARIICgNQX0gQrwESCAoDUF9OELABEggKA1BfTBCxARII",
            "CgNQX1QQsgESCAoDUF9SELMBEggKA1FfQRC0ARIICgNSX0UQtQESCAoDUl9P",
            "ELYBEggKA1JfVRC3ARIICgNSX1cQuAESCAoDQl9MELkBEggKA1NfSBC6ARII",
            "CgNLX04QuwESCAoDTF9DELwBEggKA01fRhC9ARIICgNQX00QvgESCAoDVl9D",
            "EL8BEggKA1dfUxDAARIICgNTX00QwQESCAoDU19UEMIBEggKA1NfQRDDARII",
            "CgNTX04QxAESCAoDUl9TEMUBEggKA1NfQxDGARIICgNTX0wQxwESCAoDU19H",
            "EMgBEggKA1NfWBDJARIICgNTX0sQygESCAoDU19JEMsBEggKA1NfQhDMARII",
            "CgNTX08QzQESCAoDWl9BEM4BEggKA0dfUxDPARIICgNTX1MQ0AESCAoDRV9T",
            "ENEBEggKA0xfSxDSARIICgNTX0QQ0wESCAoDU19SENQBEggKA1NfShDVARII",
            "CgNTX1oQ1gESCAoDU19FENcBEggKA0NfSBDYARIICgNTX1kQ2QESCAoDVF9X",
            "ENoBEggKA1RfShDbARIICgNUX1oQ3AESCAoDVF9IEN0BEggKA1RfTBDeARII",
            "CgNUX0cQ3wESCAoDVF9LEOABEggKA1RfTxDhARIICgNUX1QQ4gESCAoDVF9O",
            "EOMBEggKA1RfUhDkARIICgNUX00Q5QESCAoDVF9DEOYBEggKA1RfVhDnARII",
            "CgNVX0cQ6AESCAoDVV9BEOkBEggKA0FfRRDqARIICgNHX0IQ6wESCAoDVV9T",
            "EOwBEggKA1VfTRDtARIICgNVX1kQ7gESCAoDVV9aEO8BEggKA1ZfVRDwARII",
            "CgNWX0UQ8QESCAoDVl9OEPIBEggKA1ZfRxDzARIICgNWX0kQ9AESCAoDV19G",
            "EPUBEggKA0VfSBD2ARIICgNZX0UQ9wESCAoDWl9NEPgBEggKA1pfVxD5ASoq",
            "CghMYW5ndWFnZRIGCgJlbhAAEgYKAmVzEAESBgoCemgQAhIGCgJmchADKtEB",
            "CgpSZXBvcnRUeXBlEhUKEUlOVEVHUkFURURfUkVQT1JUEAASFAoQRklOQU5D",
            "SUFMX1JFUE9SVBABEhkKFVNVU1RBSU5BQklMSVRZX1JFUE9SVBACEhEKDUFO",
            "TlVBTF9SRVBPUlQQAxITCg9QUk9YWV9TVEFURU1FTlQQBBIaChZSRUdJU1RS",
            "QVRJT05fU1RBVEVNRU5UEAUSFAoQUVVBUlRFUkxZX1JFUE9SVBAGEhYKEkhB",
            "TEZfWUVBUkxZX1JFUE9SVBAHEgkKBU9USEVSEAgqSAoSSW5kdXN0cnlDb2Rl",
            "UHJlZml4EgsKB0lfU19JX0MQABINCglOX0FfSV9DX1MQARILCgdHX0lfQ19T",
            "EAISCQoFU19JX0MQAyo2CgxSZXBvcnRGb3JtYXQSCQoFUF9EX0YQABINCglp",
            "X1hfQl9SX0wQARIMCghPUEVOX1hNTBACKlQKEVJlcG9ydGluZ1N0YW5kYXJk",
            "EgsKB0dfQV9BX1AQABILCgdJX0ZfUl9TEAESCwoHSV9TX1NfQhACEg0KCUVf",
            "Rl9SX0FfRxADEgkKBUdfUl9JEARCMQoXb3JnLmNhcmJvbmNhbGwubWV0YWRh",
            "dGFQAaoCE0NhcmJvbkNhbGwuTWV0YWRhdGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::CarbonCall.Metadata.ISO3166_CountryCode), typeof(global::CarbonCall.Metadata.Language), typeof(global::CarbonCall.Metadata.ReportType), typeof(global::CarbonCall.Metadata.IndustryCodePrefix), typeof(global::CarbonCall.Metadata.ReportFormat), typeof(global::CarbonCall.Metadata.ReportingStandard), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CarbonCall.Metadata.SustainabilityReport), global::CarbonCall.Metadata.SustainabilityReport.Parser, new[]{ "GRID", "Metadata", "Report" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CarbonCall.Metadata.Metadata), global::CarbonCall.Metadata.Metadata.Parser, new[]{ "GRID", "OrganizationIdentifier", "OrganizationName", "Domicile", "OperatingCountries", "Languages", "ReportType", "ReportIssueDate", "ReportingPeriod", "ReportReplaces", "Location", "Industry", "Performance", "ReportFormat", "ReportingStandard", "Assurance", "PriorReport", "ReportHash", "ReportContext", "PropertyContexts" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CarbonCall.Metadata.ReportingPeriod), global::CarbonCall.Metadata.ReportingPeriod.Parser, new[]{ "StartDate", "EndDate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CarbonCall.Metadata.Industry), global::CarbonCall.Metadata.Industry.Parser, new[]{ "Prefix", "Code" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CarbonCall.Metadata.Metatag), global::CarbonCall.Metadata.Metatag.Parser, new[]{ "Key", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CarbonCall.Metadata.PropertyContext), global::CarbonCall.Metadata.PropertyContext.Parser, new[]{ "Property", "Metatags" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///ISO 3166-1 alpha-2 country codes
  /// </summary>
  public enum ISO3166_CountryCode {
    /// <summary>
    ///unknown country
    /// </summary>
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    /// <summary>
    ///"Afghanistan" 
    /// </summary>
    [pbr::OriginalName("A_F")] AF = 1,
    /// <summary>
    ///"Åland Islands" 
    /// </summary>
    [pbr::OriginalName("A_X")] AX = 2,
    /// <summary>
    ///"Albania" 
    /// </summary>
    [pbr::OriginalName("A_L")] AL = 3,
    /// <summary>
    ///"Algeria" 
    /// </summary>
    [pbr::OriginalName("D_Z")] DZ = 4,
    /// <summary>
    ///"American Samoa" 
    /// </summary>
    [pbr::OriginalName("A_S")] AS = 5,
    /// <summary>
    ///"Andorra" 
    /// </summary>
    [pbr::OriginalName("A_D")] AD = 6,
    /// <summary>
    ///"Angola" 
    /// </summary>
    [pbr::OriginalName("A_O")] AO = 7,
    /// <summary>
    ///"Anguilla" 
    /// </summary>
    [pbr::OriginalName("A_I")] AI = 8,
    /// <summary>
    ///"Antarctica" 
    /// </summary>
    [pbr::OriginalName("A_Q")] AQ = 9,
    /// <summary>
    ///"Antigua and Barbuda" 
    /// </summary>
    [pbr::OriginalName("A_G")] AG = 10,
    /// <summary>
    ///"Argentina" 
    /// </summary>
    [pbr::OriginalName("A_R")] AR = 11,
    /// <summary>
    ///"Armenia" 
    /// </summary>
    [pbr::OriginalName("A_M")] AM = 12,
    /// <summary>
    ///"Aruba" 
    /// </summary>
    [pbr::OriginalName("A_W")] AW = 13,
    /// <summary>
    ///"Australia" 
    /// </summary>
    [pbr::OriginalName("A_U")] AU = 14,
    /// <summary>
    ///"Austria" 
    /// </summary>
    [pbr::OriginalName("A_T")] AT = 15,
    /// <summary>
    ///"Azerbaijan" 
    /// </summary>
    [pbr::OriginalName("A_Z")] AZ = 16,
    /// <summary>
    ///"Bahamas" 
    /// </summary>
    [pbr::OriginalName("B_S")] BS = 17,
    /// <summary>
    ///"Bahrain" 
    /// </summary>
    [pbr::OriginalName("B_H")] BH = 18,
    /// <summary>
    ///"Bangladesh" 
    /// </summary>
    [pbr::OriginalName("B_D")] BD = 19,
    /// <summary>
    ///"Barbados" 
    /// </summary>
    [pbr::OriginalName("B_B")] BB = 20,
    /// <summary>
    ///"Belarus" 
    /// </summary>
    [pbr::OriginalName("B_Y")] BY = 21,
    /// <summary>
    ///"Belgium" 
    /// </summary>
    [pbr::OriginalName("B_E")] BE = 22,
    /// <summary>
    ///"Belize" 
    /// </summary>
    [pbr::OriginalName("B_Z")] BZ = 23,
    /// <summary>
    ///"Benin" 
    /// </summary>
    [pbr::OriginalName("B_J")] BJ = 24,
    /// <summary>
    ///"Bermuda" 
    /// </summary>
    [pbr::OriginalName("B_M")] BM = 25,
    /// <summary>
    ///"Bhutan" 
    /// </summary>
    [pbr::OriginalName("B_T")] BT = 26,
    /// <summary>
    ///"Bolivia (Plurinational State of)" 
    /// </summary>
    [pbr::OriginalName("B_O")] BO = 27,
    /// <summary>
    ///"Bonaire; Sint Eustatius and Saba" 
    /// </summary>
    [pbr::OriginalName("B_Q")] BQ = 28,
    /// <summary>
    ///"Bosnia and Herzegovina" 
    /// </summary>
    [pbr::OriginalName("B_A")] BA = 29,
    /// <summary>
    ///"Botswana" 
    /// </summary>
    [pbr::OriginalName("B_W")] BW = 30,
    /// <summary>
    ///"Bouvet Island" 
    /// </summary>
    [pbr::OriginalName("B_V")] BV = 31,
    /// <summary>
    ///"Brazil" 
    /// </summary>
    [pbr::OriginalName("B_R")] BR = 32,
    /// <summary>
    ///"British Indian Ocean Territory" 
    /// </summary>
    [pbr::OriginalName("I_O")] IO = 33,
    /// <summary>
    ///"Brunei Darussalam" 
    /// </summary>
    [pbr::OriginalName("B_N")] BN = 34,
    /// <summary>
    ///"Bulgaria" 
    /// </summary>
    [pbr::OriginalName("B_G")] BG = 35,
    /// <summary>
    ///"Burkina Faso" 
    /// </summary>
    [pbr::OriginalName("B_F")] BF = 36,
    /// <summary>
    ///"Burundi" 
    /// </summary>
    [pbr::OriginalName("B_I")] BI = 37,
    /// <summary>
    ///"Cabo Verde" 
    /// </summary>
    [pbr::OriginalName("C_V")] CV = 38,
    /// <summary>
    ///"Cambodia" 
    /// </summary>
    [pbr::OriginalName("K_H")] KH = 39,
    /// <summary>
    ///"Cameroon" 
    /// </summary>
    [pbr::OriginalName("C_M")] CM = 40,
    /// <summary>
    ///"Canada" 
    /// </summary>
    [pbr::OriginalName("C_A")] CA = 41,
    /// <summary>
    ///"Cayman Islands" 
    /// </summary>
    [pbr::OriginalName("K_Y")] KY = 42,
    /// <summary>
    ///"Central African Republic" 
    /// </summary>
    [pbr::OriginalName("C_F")] CF = 43,
    /// <summary>
    ///"Chad" 
    /// </summary>
    [pbr::OriginalName("T_D")] TD = 44,
    /// <summary>
    ///"Chile" 
    /// </summary>
    [pbr::OriginalName("C_L")] CL = 45,
    /// <summary>
    ///"China" 
    /// </summary>
    [pbr::OriginalName("C_N")] CN = 46,
    /// <summary>
    ///"Christmas Island" 
    /// </summary>
    [pbr::OriginalName("C_X")] CX = 47,
    /// <summary>
    ///"Cocos (Keeling) Islands" 
    /// </summary>
    [pbr::OriginalName("C_C")] CC = 48,
    /// <summary>
    ///"Colombia" 
    /// </summary>
    [pbr::OriginalName("C_O")] CO = 49,
    /// <summary>
    ///"Comoros" 
    /// </summary>
    [pbr::OriginalName("K_M")] KM = 50,
    /// <summary>
    ///"Congo" 
    /// </summary>
    [pbr::OriginalName("C_G")] CG = 51,
    /// <summary>
    ///"Congo (Democratic Republic of the)" 
    /// </summary>
    [pbr::OriginalName("C_D")] CD = 52,
    /// <summary>
    ///"Cook Islands" 
    /// </summary>
    [pbr::OriginalName("C_K")] CK = 53,
    /// <summary>
    ///"Costa Rica" 
    /// </summary>
    [pbr::OriginalName("C_R")] CR = 54,
    /// <summary>
    ///"Côte d'Ivoire" 
    /// </summary>
    [pbr::OriginalName("C_I")] CI = 55,
    /// <summary>
    ///"Croatia" 
    /// </summary>
    [pbr::OriginalName("H_R")] HR = 56,
    /// <summary>
    ///"Cuba" 
    /// </summary>
    [pbr::OriginalName("C_U")] CU = 57,
    /// <summary>
    ///"Curaçao" 
    /// </summary>
    [pbr::OriginalName("C_W")] CW = 58,
    /// <summary>
    ///"Cyprus" 
    /// </summary>
    [pbr::OriginalName("C_Y")] CY = 59,
    /// <summary>
    ///"Czechia" 
    /// </summary>
    [pbr::OriginalName("C_Z")] CZ = 60,
    /// <summary>
    ///"Denmark" 
    /// </summary>
    [pbr::OriginalName("D_K")] DK = 61,
    /// <summary>
    ///"Djibouti" 
    /// </summary>
    [pbr::OriginalName("D_J")] DJ = 62,
    /// <summary>
    ///"Dominica" 
    /// </summary>
    [pbr::OriginalName("D_M")] DM = 63,
    /// <summary>
    ///"Dominican Republic" 
    /// </summary>
    [pbr::OriginalName("D_O")] DO = 64,
    /// <summary>
    ///"Ecuador" 
    /// </summary>
    [pbr::OriginalName("E_C")] EC = 65,
    /// <summary>
    ///"Egypt" 
    /// </summary>
    [pbr::OriginalName("E_G")] EG = 66,
    /// <summary>
    ///"El Salvador" 
    /// </summary>
    [pbr::OriginalName("S_V")] SV = 67,
    /// <summary>
    ///"Equatorial Guinea" 
    /// </summary>
    [pbr::OriginalName("G_Q")] GQ = 68,
    /// <summary>
    ///"Eritrea" 
    /// </summary>
    [pbr::OriginalName("E_R")] ER = 69,
    /// <summary>
    ///"Estonia" 
    /// </summary>
    [pbr::OriginalName("E_E")] EE = 70,
    /// <summary>
    ///"Ethiopia" 
    /// </summary>
    [pbr::OriginalName("E_T")] ET = 71,
    /// <summary>
    ///"Falkland Islands (Malvinas)" 
    /// </summary>
    [pbr::OriginalName("F_K")] FK = 72,
    /// <summary>
    ///"Faroe Islands" 
    /// </summary>
    [pbr::OriginalName("F_O")] FO = 73,
    /// <summary>
    ///"Fiji" 
    /// </summary>
    [pbr::OriginalName("F_J")] FJ = 74,
    /// <summary>
    ///"Finland" 
    /// </summary>
    [pbr::OriginalName("F_I")] FI = 75,
    /// <summary>
    ///"France" 
    /// </summary>
    [pbr::OriginalName("F_R")] FR = 76,
    /// <summary>
    ///"French Guiana" 
    /// </summary>
    [pbr::OriginalName("G_F")] GF = 77,
    /// <summary>
    ///"French Polynesia" 
    /// </summary>
    [pbr::OriginalName("P_F")] PF = 78,
    /// <summary>
    ///"French Southern Territories" 
    /// </summary>
    [pbr::OriginalName("T_F")] TF = 79,
    /// <summary>
    ///"Gabon" 
    /// </summary>
    [pbr::OriginalName("G_A")] GA = 80,
    /// <summary>
    ///"Gambia" 
    /// </summary>
    [pbr::OriginalName("G_M")] GM = 81,
    /// <summary>
    ///"Georgia" 
    /// </summary>
    [pbr::OriginalName("G_E")] GE = 82,
    /// <summary>
    ///"Germany" 
    /// </summary>
    [pbr::OriginalName("D_E")] DE = 83,
    /// <summary>
    ///"Ghana" 
    /// </summary>
    [pbr::OriginalName("G_H")] GH = 84,
    /// <summary>
    ///"Gibraltar" 
    /// </summary>
    [pbr::OriginalName("G_I")] GI = 85,
    /// <summary>
    ///"Greece" 
    /// </summary>
    [pbr::OriginalName("G_R")] GR = 86,
    /// <summary>
    ///"Greenland" 
    /// </summary>
    [pbr::OriginalName("G_L")] GL = 87,
    /// <summary>
    ///"Grenada" 
    /// </summary>
    [pbr::OriginalName("G_D")] GD = 88,
    /// <summary>
    ///"Guadeloupe" 
    /// </summary>
    [pbr::OriginalName("G_P")] GP = 89,
    /// <summary>
    ///"Guam" 
    /// </summary>
    [pbr::OriginalName("G_U")] GU = 90,
    /// <summary>
    ///"Guatemala" 
    /// </summary>
    [pbr::OriginalName("G_T")] GT = 91,
    /// <summary>
    ///"Guernsey" 
    /// </summary>
    [pbr::OriginalName("G_G")] GG = 92,
    /// <summary>
    ///"Guinea" 
    /// </summary>
    [pbr::OriginalName("G_N")] GN = 93,
    /// <summary>
    ///"Guinea-Bissau" 
    /// </summary>
    [pbr::OriginalName("G_W")] GW = 94,
    /// <summary>
    ///"Guyana" 
    /// </summary>
    [pbr::OriginalName("G_Y")] GY = 95,
    /// <summary>
    ///"Haiti" 
    /// </summary>
    [pbr::OriginalName("H_T")] HT = 96,
    /// <summary>
    ///"Heard Island and McDonald Islands" 
    /// </summary>
    [pbr::OriginalName("H_M")] HM = 97,
    /// <summary>
    ///"Holy See" 
    /// </summary>
    [pbr::OriginalName("V_A")] VA = 98,
    /// <summary>
    ///"Honduras" 
    /// </summary>
    [pbr::OriginalName("H_N")] HN = 99,
    /// <summary>
    ///"Hong Kong" 
    /// </summary>
    [pbr::OriginalName("H_K")] HK = 100,
    /// <summary>
    ///"Hungary" 
    /// </summary>
    [pbr::OriginalName("H_U")] HU = 101,
    /// <summary>
    ///"Iceland" 
    /// </summary>
    [pbr::OriginalName("I_S")] IS = 102,
    /// <summary>
    ///"India" 
    /// </summary>
    [pbr::OriginalName("I_N")] IN = 103,
    /// <summary>
    ///"Indonesia" 
    /// </summary>
    [pbr::OriginalName("I_D")] ID = 104,
    /// <summary>
    ///"Iran (Islamic Republic of)" 
    /// </summary>
    [pbr::OriginalName("I_R")] IR = 105,
    /// <summary>
    ///"Iraq" 
    /// </summary>
    [pbr::OriginalName("I_Q")] IQ = 106,
    /// <summary>
    ///"Ireland" 
    /// </summary>
    [pbr::OriginalName("I_E")] IE = 107,
    /// <summary>
    ///"Isle of Man" 
    /// </summary>
    [pbr::OriginalName("I_M")] IM = 108,
    /// <summary>
    ///"Israel" 
    /// </summary>
    [pbr::OriginalName("I_L")] IL = 109,
    /// <summary>
    ///"Italy" 
    /// </summary>
    [pbr::OriginalName("I_T")] IT = 110,
    /// <summary>
    ///"Jamaica" 
    /// </summary>
    [pbr::OriginalName("J_M")] JM = 111,
    /// <summary>
    ///"Japan" 
    /// </summary>
    [pbr::OriginalName("J_P")] JP = 112,
    /// <summary>
    ///"Jersey" 
    /// </summary>
    [pbr::OriginalName("J_E")] JE = 113,
    /// <summary>
    ///"Jordan" 
    /// </summary>
    [pbr::OriginalName("J_O")] JO = 114,
    /// <summary>
    ///"Kazakhstan" 
    /// </summary>
    [pbr::OriginalName("K_Z")] KZ = 115,
    /// <summary>
    ///"Kenya" 
    /// </summary>
    [pbr::OriginalName("K_E")] KE = 116,
    /// <summary>
    ///"Kiribati" 
    /// </summary>
    [pbr::OriginalName("K_I")] KI = 117,
    /// <summary>
    ///"Korea (Democratic People's Republic of)" 
    /// </summary>
    [pbr::OriginalName("K_P")] KP = 118,
    /// <summary>
    ///"Korea (Republic of)" 
    /// </summary>
    [pbr::OriginalName("K_R")] KR = 119,
    /// <summary>
    ///"Kuwait" 
    /// </summary>
    [pbr::OriginalName("K_W")] KW = 120,
    /// <summary>
    ///"Kyrgyzstan" 
    /// </summary>
    [pbr::OriginalName("K_G")] KG = 121,
    /// <summary>
    ///"Lao People's Democratic Republic" 
    /// </summary>
    [pbr::OriginalName("L_A")] LA = 122,
    /// <summary>
    ///"Latvia" 
    /// </summary>
    [pbr::OriginalName("L_V")] LV = 123,
    /// <summary>
    ///"Lebanon" 
    /// </summary>
    [pbr::OriginalName("L_B")] LB = 124,
    /// <summary>
    ///"Lesotho" 
    /// </summary>
    [pbr::OriginalName("L_S")] LS = 125,
    /// <summary>
    ///"Liberia" 
    /// </summary>
    [pbr::OriginalName("L_R")] LR = 126,
    /// <summary>
    ///"Libya" 
    /// </summary>
    [pbr::OriginalName("L_Y")] LY = 127,
    /// <summary>
    ///"Liechtenstein" 
    /// </summary>
    [pbr::OriginalName("L_I")] LI = 128,
    /// <summary>
    ///"Lithuania" 
    /// </summary>
    [pbr::OriginalName("L_T")] LT = 129,
    /// <summary>
    ///"Luxembourg" 
    /// </summary>
    [pbr::OriginalName("L_U")] LU = 130,
    /// <summary>
    ///"Macao" 
    /// </summary>
    [pbr::OriginalName("M_O")] MO = 131,
    /// <summary>
    ///"Macedonia (the former Yugoslav Republic of)" 
    /// </summary>
    [pbr::OriginalName("M_K")] MK = 132,
    /// <summary>
    ///"Madagascar" 
    /// </summary>
    [pbr::OriginalName("M_G")] MG = 133,
    /// <summary>
    ///"Malawi" 
    /// </summary>
    [pbr::OriginalName("M_W")] MW = 134,
    /// <summary>
    ///"Malaysia" 
    /// </summary>
    [pbr::OriginalName("M_Y")] MY = 135,
    /// <summary>
    ///"Maldives" 
    /// </summary>
    [pbr::OriginalName("M_V")] MV = 136,
    /// <summary>
    ///"Mali" 
    /// </summary>
    [pbr::OriginalName("M_L")] ML = 137,
    /// <summary>
    ///"Malta" 
    /// </summary>
    [pbr::OriginalName("M_T")] MT = 138,
    /// <summary>
    ///"Marshall Islands" 
    /// </summary>
    [pbr::OriginalName("M_H")] MH = 139,
    /// <summary>
    ///"Martinique" 
    /// </summary>
    [pbr::OriginalName("M_Q")] MQ = 140,
    /// <summary>
    ///"Mauritania" 
    /// </summary>
    [pbr::OriginalName("M_R")] MR = 141,
    /// <summary>
    ///"Mauritius" 
    /// </summary>
    [pbr::OriginalName("M_U")] MU = 142,
    /// <summary>
    ///"Mayotte" 
    /// </summary>
    [pbr::OriginalName("Y_T")] YT = 143,
    /// <summary>
    ///"Mexico" 
    /// </summary>
    [pbr::OriginalName("M_X")] MX = 144,
    /// <summary>
    ///"Micronesia (Federated States of)" 
    /// </summary>
    [pbr::OriginalName("F_M")] FM = 145,
    /// <summary>
    ///"Moldova (Republic of)" 
    /// </summary>
    [pbr::OriginalName("M_D")] MD = 146,
    /// <summary>
    ///"Monaco" 
    /// </summary>
    [pbr::OriginalName("M_C")] MC = 147,
    /// <summary>
    ///"Mongolia" 
    /// </summary>
    [pbr::OriginalName("M_N")] MN = 148,
    /// <summary>
    ///"Montenegro" 
    /// </summary>
    [pbr::OriginalName("M_E")] ME = 149,
    /// <summary>
    ///"Montserrat" 
    /// </summary>
    [pbr::OriginalName("M_S")] MS = 150,
    /// <summary>
    ///"Morocco" 
    /// </summary>
    [pbr::OriginalName("M_A")] MA = 151,
    /// <summary>
    ///"Mozambique" 
    /// </summary>
    [pbr::OriginalName("M_Z")] MZ = 152,
    /// <summary>
    ///"Myanmar" 
    /// </summary>
    [pbr::OriginalName("M_M")] MM = 153,
    /// <summary>
    ///"Namibia" 
    /// </summary>
    [pbr::OriginalName("N_A")] NA = 154,
    /// <summary>
    ///"Nauru" 
    /// </summary>
    [pbr::OriginalName("N_R")] NR = 155,
    /// <summary>
    ///"Nepal" 
    /// </summary>
    [pbr::OriginalName("N_P")] NP = 156,
    /// <summary>
    ///"Netherlands" 
    /// </summary>
    [pbr::OriginalName("N_L")] NL = 157,
    /// <summary>
    ///"New Caledonia" 
    /// </summary>
    [pbr::OriginalName("N_C")] NC = 158,
    /// <summary>
    ///"New Zealand" 
    /// </summary>
    [pbr::OriginalName("N_Z")] NZ = 159,
    /// <summary>
    ///"Nicaragua" 
    /// </summary>
    [pbr::OriginalName("N_I")] NI = 160,
    /// <summary>
    ///"Niger" 
    /// </summary>
    [pbr::OriginalName("N_E")] NE = 161,
    /// <summary>
    ///"Nigeria" 
    /// </summary>
    [pbr::OriginalName("N_G")] NG = 162,
    /// <summary>
    ///"Niue" 
    /// </summary>
    [pbr::OriginalName("N_U")] NU = 163,
    /// <summary>
    ///"Norfolk Island" 
    /// </summary>
    [pbr::OriginalName("N_F")] NF = 164,
    /// <summary>
    ///"Northern Mariana Islands" 
    /// </summary>
    [pbr::OriginalName("M_P")] MP = 165,
    /// <summary>
    ///"Norway" 
    /// </summary>
    [pbr::OriginalName("N_O")] NO = 166,
    /// <summary>
    ///"Oman" 
    /// </summary>
    [pbr::OriginalName("O_M")] OM = 167,
    /// <summary>
    ///"Pakistan" 
    /// </summary>
    [pbr::OriginalName("P_K")] PK = 168,
    /// <summary>
    ///"Palau" 
    /// </summary>
    [pbr::OriginalName("P_W")] PW = 169,
    /// <summary>
    ///"Palestine; State of" 
    /// </summary>
    [pbr::OriginalName("P_S")] PS = 170,
    /// <summary>
    ///"Panama" 
    /// </summary>
    [pbr::OriginalName("P_A")] PA = 171,
    /// <summary>
    ///"Papua New Guinea" 
    /// </summary>
    [pbr::OriginalName("P_G")] PG = 172,
    /// <summary>
    ///"Paraguay" 
    /// </summary>
    [pbr::OriginalName("P_Y")] PY = 173,
    /// <summary>
    ///"Peru" 
    /// </summary>
    [pbr::OriginalName("P_E")] PE = 174,
    /// <summary>
    ///"Philippines" 
    /// </summary>
    [pbr::OriginalName("P_H")] PH = 175,
    /// <summary>
    ///"Pitcairn" 
    /// </summary>
    [pbr::OriginalName("P_N")] PN = 176,
    /// <summary>
    ///"Poland" 
    /// </summary>
    [pbr::OriginalName("P_L")] PL = 177,
    /// <summary>
    ///"Portugal" 
    /// </summary>
    [pbr::OriginalName("P_T")] PT = 178,
    /// <summary>
    ///"Puerto Rico" 
    /// </summary>
    [pbr::OriginalName("P_R")] PR = 179,
    /// <summary>
    ///"Qatar" 
    /// </summary>
    [pbr::OriginalName("Q_A")] QA = 180,
    /// <summary>
    ///"Réunion" 
    /// </summary>
    [pbr::OriginalName("R_E")] RE = 181,
    /// <summary>
    ///"Romania" 
    /// </summary>
    [pbr::OriginalName("R_O")] RO = 182,
    /// <summary>
    ///"Russian Federation" 
    /// </summary>
    [pbr::OriginalName("R_U")] RU = 183,
    /// <summary>
    ///"Rwanda" 
    /// </summary>
    [pbr::OriginalName("R_W")] RW = 184,
    /// <summary>
    ///"Saint Barthélemy" 
    /// </summary>
    [pbr::OriginalName("B_L")] BL = 185,
    /// <summary>
    ///"Saint Helena; Ascension and Tristan da Cunha" 
    /// </summary>
    [pbr::OriginalName("S_H")] SH = 186,
    /// <summary>
    ///"Saint Kitts and Nevis" 
    /// </summary>
    [pbr::OriginalName("K_N")] KN = 187,
    /// <summary>
    ///"Saint Lucia" 
    /// </summary>
    [pbr::OriginalName("L_C")] LC = 188,
    /// <summary>
    ///"Saint Martin (French part)" 
    /// </summary>
    [pbr::OriginalName("M_F")] MF = 189,
    /// <summary>
    ///"Saint Pierre and Miquelon" 
    /// </summary>
    [pbr::OriginalName("P_M")] PM = 190,
    /// <summary>
    ///"Saint Vincent and the Grenadines" 
    /// </summary>
    [pbr::OriginalName("V_C")] VC = 191,
    /// <summary>
    ///"Samoa" 
    /// </summary>
    [pbr::OriginalName("W_S")] WS = 192,
    /// <summary>
    ///"San Marino" 
    /// </summary>
    [pbr::OriginalName("S_M")] SM = 193,
    /// <summary>
    ///"Sao Tome and Principe" 
    /// </summary>
    [pbr::OriginalName("S_T")] ST = 194,
    /// <summary>
    ///"Saudi Arabia" 
    /// </summary>
    [pbr::OriginalName("S_A")] SA = 195,
    /// <summary>
    ///"Senegal" 
    /// </summary>
    [pbr::OriginalName("S_N")] SN = 196,
    /// <summary>
    ///"Serbia" 
    /// </summary>
    [pbr::OriginalName("R_S")] RS = 197,
    /// <summary>
    ///"Seychelles" 
    /// </summary>
    [pbr::OriginalName("S_C")] SC = 198,
    /// <summary>
    ///"Sierra Leone" 
    /// </summary>
    [pbr::OriginalName("S_L")] SL = 199,
    /// <summary>
    ///"Singapore"
    /// </summary>
    [pbr::OriginalName("S_G")] SG = 200,
    /// <summary>
    ///"Sint Maarten (Dutch part)" 
    /// </summary>
    [pbr::OriginalName("S_X")] SX = 201,
    /// <summary>
    ///"Slovakia" 
    /// </summary>
    [pbr::OriginalName("S_K")] SK = 202,
    /// <summary>
    ///"Slovenia" 
    /// </summary>
    [pbr::OriginalName("S_I")] SI = 203,
    /// <summary>
    ///"Solomon Islands" 
    /// </summary>
    [pbr::OriginalName("S_B")] SB = 204,
    /// <summary>
    ///"Somalia" 
    /// </summary>
    [pbr::OriginalName("S_O")] SO = 205,
    /// <summary>
    ///"South Africa" 
    /// </summary>
    [pbr::OriginalName("Z_A")] ZA = 206,
    /// <summary>
    ///"South Georgia and the South Sandwich Islands" 
    /// </summary>
    [pbr::OriginalName("G_S")] GS = 207,
    /// <summary>
    ///"South Sudan" 
    /// </summary>
    [pbr::OriginalName("S_S")] SS = 208,
    /// <summary>
    ///"Spain" 
    /// </summary>
    [pbr::OriginalName("E_S")] ES = 209,
    /// <summary>
    ///"Sri Lanka" 
    /// </summary>
    [pbr::OriginalName("L_K")] LK = 210,
    /// <summary>
    ///"Sudan" 
    /// </summary>
    [pbr::OriginalName("S_D")] SD = 211,
    /// <summary>
    ///"Suriname" 
    /// </summary>
    [pbr::OriginalName("S_R")] SR = 212,
    /// <summary>
    ///"Svalbard and Jan Mayen" 
    /// </summary>
    [pbr::OriginalName("S_J")] SJ = 213,
    /// <summary>
    ///"Swaziland" 
    /// </summary>
    [pbr::OriginalName("S_Z")] SZ = 214,
    /// <summary>
    ///"Sweden" 
    /// </summary>
    [pbr::OriginalName("S_E")] SE = 215,
    /// <summary>
    ///"Switzerland" 
    /// </summary>
    [pbr::OriginalName("C_H")] CH = 216,
    /// <summary>
    ///"Syrian Arab Republic" 
    /// </summary>
    [pbr::OriginalName("S_Y")] SY = 217,
    /// <summary>
    ///"Taiwan; Province of China[a]" 
    /// </summary>
    [pbr::OriginalName("T_W")] TW = 218,
    /// <summary>
    ///"Tajikistan" 
    /// </summary>
    [pbr::OriginalName("T_J")] TJ = 219,
    /// <summary>
    ///"Tanzania; United Republic of" 
    /// </summary>
    [pbr::OriginalName("T_Z")] TZ = 220,
    /// <summary>
    ///"Thailand" 
    /// </summary>
    [pbr::OriginalName("T_H")] TH = 221,
    /// <summary>
    ///"Timor-Leste" 
    /// </summary>
    [pbr::OriginalName("T_L")] TL = 222,
    /// <summary>
    ///"Togo" 
    /// </summary>
    [pbr::OriginalName("T_G")] TG = 223,
    /// <summary>
    ///"Tokelau" 
    /// </summary>
    [pbr::OriginalName("T_K")] TK = 224,
    /// <summary>
    ///"Tonga" 
    /// </summary>
    [pbr::OriginalName("T_O")] TO = 225,
    /// <summary>
    ///"Trinidad and Tobago" 
    /// </summary>
    [pbr::OriginalName("T_T")] TT = 226,
    /// <summary>
    ///"Tunisia" 
    /// </summary>
    [pbr::OriginalName("T_N")] TN = 227,
    /// <summary>
    ///"Turkey" 
    /// </summary>
    [pbr::OriginalName("T_R")] TR = 228,
    /// <summary>
    ///"Turkmenistan" 
    /// </summary>
    [pbr::OriginalName("T_M")] TM = 229,
    /// <summary>
    ///"Turks and Caicos Islands" 
    /// </summary>
    [pbr::OriginalName("T_C")] TC = 230,
    /// <summary>
    ///"Tuvalu" 
    /// </summary>
    [pbr::OriginalName("T_V")] TV = 231,
    /// <summary>
    ///"Uganda" 
    /// </summary>
    [pbr::OriginalName("U_G")] UG = 232,
    /// <summary>
    ///"Ukraine" 
    /// </summary>
    [pbr::OriginalName("U_A")] UA = 233,
    /// <summary>
    ///"United Arab Emirates" 
    /// </summary>
    [pbr::OriginalName("A_E")] AE = 234,
    /// <summary>
    ///"United Kingdom of Great Britain and Northern Ireland" 
    /// </summary>
    [pbr::OriginalName("G_B")] GB = 235,
    /// <summary>
    ///"United States of America" 
    /// </summary>
    [pbr::OriginalName("U_S")] US = 236,
    /// <summary>
    ///"United States Minor Outlying Islands" 
    /// </summary>
    [pbr::OriginalName("U_M")] UM = 237,
    /// <summary>
    ///"Uruguay" 
    /// </summary>
    [pbr::OriginalName("U_Y")] UY = 238,
    /// <summary>
    ///"Uzbekistan" 
    /// </summary>
    [pbr::OriginalName("U_Z")] UZ = 239,
    /// <summary>
    ///"Vanuatu" 
    /// </summary>
    [pbr::OriginalName("V_U")] VU = 240,
    /// <summary>
    ///"Venezuela (Bolivarian Republic of)" 
    /// </summary>
    [pbr::OriginalName("V_E")] VE = 241,
    /// <summary>
    ///"Viet Nam" 
    /// </summary>
    [pbr::OriginalName("V_N")] VN = 242,
    /// <summary>
    ///"Virgin Islands (British)" 
    /// </summary>
    [pbr::OriginalName("V_G")] VG = 243,
    /// <summary>
    ///"Virgin Islands (U.S.)" 
    /// </summary>
    [pbr::OriginalName("V_I")] VI = 244,
    /// <summary>
    ///"Wallis and Futuna" 
    /// </summary>
    [pbr::OriginalName("W_F")] WF = 245,
    /// <summary>
    ///"Western Sahara" 
    /// </summary>
    [pbr::OriginalName("E_H")] EH = 246,
    /// <summary>
    ///"Yemen" 
    /// </summary>
    [pbr::OriginalName("Y_E")] YE = 247,
    /// <summary>
    ///"Zambia" 
    /// </summary>
    [pbr::OriginalName("Z_M")] ZM = 248,
    /// <summary>
    ///"Zimbabwe" 
    /// </summary>
    [pbr::OriginalName("Z_W")] ZW = 249,
  }

  public enum Language {
    /// <summary>
    ///"English"
    /// </summary>
    [pbr::OriginalName("en")] En = 0,
    /// <summary>
    ///"Spanish"
    /// </summary>
    [pbr::OriginalName("es")] Es = 1,
    /// <summary>
    ///"Chinese"
    /// </summary>
    [pbr::OriginalName("zh")] Zh = 2,
    /// <summary>
    ///"French"
    /// </summary>
    [pbr::OriginalName("fr")] Fr = 3,
  }

  public enum ReportType {
    [pbr::OriginalName("INTEGRATED_REPORT")] IntegratedReport = 0,
    [pbr::OriginalName("FINANCIAL_REPORT")] FinancialReport = 1,
    [pbr::OriginalName("SUSTAINABILITY_REPORT")] SustainabilityReport = 2,
    [pbr::OriginalName("ANNUAL_REPORT")] AnnualReport = 3,
    [pbr::OriginalName("PROXY_STATEMENT")] ProxyStatement = 4,
    [pbr::OriginalName("REGISTRATION_STATEMENT")] RegistrationStatement = 5,
    [pbr::OriginalName("QUARTERLY_REPORT")] QuarterlyReport = 6,
    [pbr::OriginalName("HALF_YEARLY_REPORT")] HalfYearlyReport = 7,
    [pbr::OriginalName("OTHER")] Other = 8,
  }

  /// <summary>
  ///Industry code prefix, i.e. ISIC
  /// </summary>
  public enum IndustryCodePrefix {
    [pbr::OriginalName("I_S_I_C")] ISIC = 0,
    [pbr::OriginalName("N_A_I_C_S")] NAICS = 1,
    [pbr::OriginalName("G_I_C_S")] GICS = 2,
    /// <summary>
    ///TODO: add more
    /// </summary>
    [pbr::OriginalName("S_I_C")] SIC = 3,
  }

  public enum ReportFormat {
    [pbr::OriginalName("P_D_F")] PDF = 0,
    [pbr::OriginalName("i_X_B_R_L")] IXBRL = 1,
    /// <summary>
    ///TODO: add more
    /// </summary>
    [pbr::OriginalName("OPEN_XML")] OpenXml = 2,
  }

  public enum ReportingStandard {
    [pbr::OriginalName("G_A_A_P")] GAAP = 0,
    [pbr::OriginalName("I_F_R_S")] IFRS = 1,
    [pbr::OriginalName("I_S_S_B")] ISSB = 2,
    [pbr::OriginalName("E_F_R_A_G")] EFRAG = 3,
    /// <summary>
    ///TODO: add more
    /// </summary>
    [pbr::OriginalName("G_R_I")] GRI = 4,
  }

  #endregion

  #region Messages
  public sealed partial class SustainabilityReport : pb::IMessage<SustainabilityReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SustainabilityReport> _parser = new pb::MessageParser<SustainabilityReport>(() => new SustainabilityReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SustainabilityReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CarbonCall.Metadata.MetadataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SustainabilityReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SustainabilityReport(SustainabilityReport other) : this() {
      gRID_ = other.gRID_;
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      report_ = other.report_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SustainabilityReport Clone() {
      return new SustainabilityReport(this);
    }

    /// <summary>Field number for the "g_r_i_d" field.</summary>
    public const int GRIDFieldNumber = 1;
    private string gRID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GRID {
      get { return gRID_; }
      set {
        gRID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 2;
    private global::CarbonCall.Metadata.Metadata metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::CarbonCall.Metadata.Metadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "report" field.</summary>
    public const int ReportFieldNumber = 3;
    private string report_ = "";
    /// <summary>
    ///could be google.protobuf.Any or bytes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Report {
      get { return report_; }
      set {
        report_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SustainabilityReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SustainabilityReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GRID != other.GRID) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (Report != other.Report) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (GRID.Length != 0) hash ^= GRID.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (Report.Length != 0) hash ^= Report.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GRID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GRID);
      }
      if (metadata_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Metadata);
      }
      if (Report.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Report);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GRID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GRID);
      }
      if (metadata_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Metadata);
      }
      if (Report.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Report);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (GRID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GRID);
      }
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (Report.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Report);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SustainabilityReport other) {
      if (other == null) {
        return;
      }
      if (other.GRID.Length != 0) {
        GRID = other.GRID;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::CarbonCall.Metadata.Metadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.Report.Length != 0) {
        Report = other.Report;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GRID = input.ReadString();
            break;
          }
          case 18: {
            if (metadata_ == null) {
              Metadata = new global::CarbonCall.Metadata.Metadata();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 26: {
            Report = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            GRID = input.ReadString();
            break;
          }
          case 18: {
            if (metadata_ == null) {
              Metadata = new global::CarbonCall.Metadata.Metadata();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 26: {
            Report = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Metadata : pb::IMessage<Metadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Metadata> _parser = new pb::MessageParser<Metadata>(() => new Metadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Metadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CarbonCall.Metadata.MetadataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Metadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Metadata(Metadata other) : this() {
      gRID_ = other.gRID_;
      organizationIdentifier_ = other.organizationIdentifier_;
      organizationName_ = other.organizationName_;
      domicile_ = other.domicile_;
      operatingCountries_ = other.operatingCountries_.Clone();
      languages_ = other.languages_.Clone();
      reportType_ = other.reportType_;
      reportIssueDate_ = other.reportIssueDate_;
      reportingPeriod_ = other.reportingPeriod_ != null ? other.reportingPeriod_.Clone() : null;
      reportReplaces_ = other.reportReplaces_;
      location_ = other.location_;
      industry_ = other.industry_ != null ? other.industry_.Clone() : null;
      performance_ = other.performance_;
      reportFormat_ = other.reportFormat_;
      reportingStandard_ = other.reportingStandard_;
      assurance_ = other.assurance_;
      priorReport_ = other.priorReport_;
      reportHash_ = other.reportHash_;
      reportContext_ = other.reportContext_.Clone();
      propertyContexts_ = other.propertyContexts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Metadata Clone() {
      return new Metadata(this);
    }

    /// <summary>Field number for the "g_r_i_d" field.</summary>
    public const int GRIDFieldNumber = 1;
    private string gRID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GRID {
      get { return gRID_; }
      set {
        gRID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "organization_identifier" field.</summary>
    public const int OrganizationIdentifierFieldNumber = 2;
    private string organizationIdentifier_ = "";
    /// <summary>
    ///Includes a scheme prefix and the identity code used for the scheme.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrganizationIdentifier {
      get { return organizationIdentifier_; }
      set {
        organizationIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "organization_name" field.</summary>
    public const int OrganizationNameFieldNumber = 3;
    private string organizationName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrganizationName {
      get { return organizationName_; }
      set {
        organizationName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "domicile" field.</summary>
    public const int DomicileFieldNumber = 4;
    private global::CarbonCall.Metadata.ISO3166_CountryCode domicile_ = global::CarbonCall.Metadata.ISO3166_CountryCode.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::CarbonCall.Metadata.ISO3166_CountryCode Domicile {
      get { return domicile_; }
      set {
        domicile_ = value;
      }
    }

    /// <summary>Field number for the "operating_countries" field.</summary>
    public const int OperatingCountriesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::CarbonCall.Metadata.ISO3166_CountryCode> _repeated_operatingCountries_codec
        = pb::FieldCodec.ForEnum(42, x => (int) x, x => (global::CarbonCall.Metadata.ISO3166_CountryCode) x);
    private readonly pbc::RepeatedField<global::CarbonCall.Metadata.ISO3166_CountryCode> operatingCountries_ = new pbc::RepeatedField<global::CarbonCall.Metadata.ISO3166_CountryCode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::CarbonCall.Metadata.ISO3166_CountryCode> OperatingCountries {
      get { return operatingCountries_; }
    }

    /// <summary>Field number for the "languages" field.</summary>
    public const int LanguagesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::CarbonCall.Metadata.Language> _repeated_languages_codec
        = pb::FieldCodec.ForEnum(50, x => (int) x, x => (global::CarbonCall.Metadata.Language) x);
    private readonly pbc::RepeatedField<global::CarbonCall.Metadata.Language> languages_ = new pbc::RepeatedField<global::CarbonCall.Metadata.Language>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::CarbonCall.Metadata.Language> Languages {
      get { return languages_; }
    }

    /// <summary>Field number for the "report_type" field.</summary>
    public const int ReportTypeFieldNumber = 7;
    private global::CarbonCall.Metadata.ReportType reportType_ = global::CarbonCall.Metadata.ReportType.IntegratedReport;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::CarbonCall.Metadata.ReportType ReportType {
      get { return reportType_; }
      set {
        reportType_ = value;
      }
    }

    /// <summary>Field number for the "report_issue_date" field.</summary>
    public const int ReportIssueDateFieldNumber = 8;
    private string reportIssueDate_ = "";
    /// <summary>
    ///ISO 8601 date format
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ReportIssueDate {
      get { return reportIssueDate_; }
      set {
        reportIssueDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reporting_period" field.</summary>
    public const int ReportingPeriodFieldNumber = 9;
    private global::CarbonCall.Metadata.ReportingPeriod reportingPeriod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::CarbonCall.Metadata.ReportingPeriod ReportingPeriod {
      get { return reportingPeriod_; }
      set {
        reportingPeriod_ = value;
      }
    }

    /// <summary>Field number for the "report_replaces" field.</summary>
    public const int ReportReplacesFieldNumber = 10;
    private string reportReplaces_ = "";
    /// <summary>
    ///GR.ID of the report this report replaces
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ReportReplaces {
      get { return reportReplaces_; }
      set {
        reportReplaces_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 11;
    private string location_ = "";
    /// <summary>
    ///URL or URI of the report
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "industry" field.</summary>
    public const int IndustryFieldNumber = 12;
    private global::CarbonCall.Metadata.Industry industry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::CarbonCall.Metadata.Industry Industry {
      get { return industry_; }
      set {
        industry_ = value;
      }
    }

    /// <summary>Field number for the "performance" field.</summary>
    public const int PerformanceFieldNumber = 13;
    private string performance_ = "";
    /// <summary>
    ///xBRL-JSON snippet that provides certain performance information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Performance {
      get { return performance_; }
      set {
        performance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "report_format" field.</summary>
    public const int ReportFormatFieldNumber = 14;
    private global::CarbonCall.Metadata.ReportFormat reportFormat_ = global::CarbonCall.Metadata.ReportFormat.PDF;
    /// <summary>
    ///Format of the report
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::CarbonCall.Metadata.ReportFormat ReportFormat {
      get { return reportFormat_; }
      set {
        reportFormat_ = value;
      }
    }

    /// <summary>Field number for the "reporting_standard" field.</summary>
    public const int ReportingStandardFieldNumber = 15;
    private global::CarbonCall.Metadata.ReportingStandard reportingStandard_ = global::CarbonCall.Metadata.ReportingStandard.GAAP;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::CarbonCall.Metadata.ReportingStandard ReportingStandard {
      get { return reportingStandard_; }
      set {
        reportingStandard_ = value;
      }
    }

    /// <summary>Field number for the "assurance" field.</summary>
    public const int AssuranceFieldNumber = 16;
    private string assurance_ = "";
    /// <summary>
    ///Scheme prefix and identifier for the provider that conducted the assurance or audit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Assurance {
      get { return assurance_; }
      set {
        assurance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prior_report" field.</summary>
    public const int PriorReportFieldNumber = 17;
    private string priorReport_ = "";
    /// <summary>
    ///GR.ID of the report this report is based on
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PriorReport {
      get { return priorReport_; }
      set {
        priorReport_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "report_hash" field.</summary>
    public const int ReportHashFieldNumber = 18;
    private string reportHash_ = "";
    /// <summary>
    ///SHA-256 hash of the report
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ReportHash {
      get { return reportHash_; }
      set {
        reportHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "report_context" field.</summary>
    public const int ReportContextFieldNumber = 19;
    private static readonly pb::FieldCodec<global::CarbonCall.Metadata.Metatag> _repeated_reportContext_codec
        = pb::FieldCodec.ForMessage(154, global::CarbonCall.Metadata.Metatag.Parser);
    private readonly pbc::RepeatedField<global::CarbonCall.Metadata.Metatag> reportContext_ = new pbc::RepeatedField<global::CarbonCall.Metadata.Metatag>();
    /// <summary>
    ///Metatags that provide additional context for the report
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::CarbonCall.Metadata.Metatag> ReportContext {
      get { return reportContext_; }
    }

    /// <summary>Field number for the "property_contexts" field.</summary>
    public const int PropertyContextsFieldNumber = 20;
    private static readonly pb::FieldCodec<global::CarbonCall.Metadata.PropertyContext> _repeated_propertyContexts_codec
        = pb::FieldCodec.ForMessage(162, global::CarbonCall.Metadata.PropertyContext.Parser);
    private readonly pbc::RepeatedField<global::CarbonCall.Metadata.PropertyContext> propertyContexts_ = new pbc::RepeatedField<global::CarbonCall.Metadata.PropertyContext>();
    /// <summary>
    ///Property contexts that provide additional context for the report, i.e., section metadata
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::CarbonCall.Metadata.PropertyContext> PropertyContexts {
      get { return propertyContexts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Metadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Metadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GRID != other.GRID) return false;
      if (OrganizationIdentifier != other.OrganizationIdentifier) return false;
      if (OrganizationName != other.OrganizationName) return false;
      if (Domicile != other.Domicile) return false;
      if(!operatingCountries_.Equals(other.operatingCountries_)) return false;
      if(!languages_.Equals(other.languages_)) return false;
      if (ReportType != other.ReportType) return false;
      if (ReportIssueDate != other.ReportIssueDate) return false;
      if (!object.Equals(ReportingPeriod, other.ReportingPeriod)) return false;
      if (ReportReplaces != other.ReportReplaces) return false;
      if (Location != other.Location) return false;
      if (!object.Equals(Industry, other.Industry)) return false;
      if (Performance != other.Performance) return false;
      if (ReportFormat != other.ReportFormat) return false;
      if (ReportingStandard != other.ReportingStandard) return false;
      if (Assurance != other.Assurance) return false;
      if (PriorReport != other.PriorReport) return false;
      if (ReportHash != other.ReportHash) return false;
      if(!reportContext_.Equals(other.reportContext_)) return false;
      if(!propertyContexts_.Equals(other.propertyContexts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (GRID.Length != 0) hash ^= GRID.GetHashCode();
      if (OrganizationIdentifier.Length != 0) hash ^= OrganizationIdentifier.GetHashCode();
      if (OrganizationName.Length != 0) hash ^= OrganizationName.GetHashCode();
      if (Domicile != global::CarbonCall.Metadata.ISO3166_CountryCode.Unknown) hash ^= Domicile.GetHashCode();
      hash ^= operatingCountries_.GetHashCode();
      hash ^= languages_.GetHashCode();
      if (ReportType != global::CarbonCall.Metadata.ReportType.IntegratedReport) hash ^= ReportType.GetHashCode();
      if (ReportIssueDate.Length != 0) hash ^= ReportIssueDate.GetHashCode();
      if (reportingPeriod_ != null) hash ^= ReportingPeriod.GetHashCode();
      if (ReportReplaces.Length != 0) hash ^= ReportReplaces.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (industry_ != null) hash ^= Industry.GetHashCode();
      if (Performance.Length != 0) hash ^= Performance.GetHashCode();
      if (ReportFormat != global::CarbonCall.Metadata.ReportFormat.PDF) hash ^= ReportFormat.GetHashCode();
      if (ReportingStandard != global::CarbonCall.Metadata.ReportingStandard.GAAP) hash ^= ReportingStandard.GetHashCode();
      if (Assurance.Length != 0) hash ^= Assurance.GetHashCode();
      if (PriorReport.Length != 0) hash ^= PriorReport.GetHashCode();
      if (ReportHash.Length != 0) hash ^= ReportHash.GetHashCode();
      hash ^= reportContext_.GetHashCode();
      hash ^= propertyContexts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GRID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GRID);
      }
      if (OrganizationIdentifier.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OrganizationIdentifier);
      }
      if (OrganizationName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OrganizationName);
      }
      if (Domicile != global::CarbonCall.Metadata.ISO3166_CountryCode.Unknown) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Domicile);
      }
      operatingCountries_.WriteTo(output, _repeated_operatingCountries_codec);
      languages_.WriteTo(output, _repeated_languages_codec);
      if (ReportType != global::CarbonCall.Metadata.ReportType.IntegratedReport) {
        output.WriteRawTag(56);
        output.WriteEnum((int) ReportType);
      }
      if (ReportIssueDate.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ReportIssueDate);
      }
      if (reportingPeriod_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ReportingPeriod);
      }
      if (ReportReplaces.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ReportReplaces);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Location);
      }
      if (industry_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Industry);
      }
      if (Performance.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Performance);
      }
      if (ReportFormat != global::CarbonCall.Metadata.ReportFormat.PDF) {
        output.WriteRawTag(112);
        output.WriteEnum((int) ReportFormat);
      }
      if (ReportingStandard != global::CarbonCall.Metadata.ReportingStandard.GAAP) {
        output.WriteRawTag(120);
        output.WriteEnum((int) ReportingStandard);
      }
      if (Assurance.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Assurance);
      }
      if (PriorReport.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(PriorReport);
      }
      if (ReportHash.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(ReportHash);
      }
      reportContext_.WriteTo(output, _repeated_reportContext_codec);
      propertyContexts_.WriteTo(output, _repeated_propertyContexts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GRID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GRID);
      }
      if (OrganizationIdentifier.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OrganizationIdentifier);
      }
      if (OrganizationName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OrganizationName);
      }
      if (Domicile != global::CarbonCall.Metadata.ISO3166_CountryCode.Unknown) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Domicile);
      }
      operatingCountries_.WriteTo(ref output, _repeated_operatingCountries_codec);
      languages_.WriteTo(ref output, _repeated_languages_codec);
      if (ReportType != global::CarbonCall.Metadata.ReportType.IntegratedReport) {
        output.WriteRawTag(56);
        output.WriteEnum((int) ReportType);
      }
      if (ReportIssueDate.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ReportIssueDate);
      }
      if (reportingPeriod_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ReportingPeriod);
      }
      if (ReportReplaces.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ReportReplaces);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Location);
      }
      if (industry_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Industry);
      }
      if (Performance.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Performance);
      }
      if (ReportFormat != global::CarbonCall.Metadata.ReportFormat.PDF) {
        output.WriteRawTag(112);
        output.WriteEnum((int) ReportFormat);
      }
      if (ReportingStandard != global::CarbonCall.Metadata.ReportingStandard.GAAP) {
        output.WriteRawTag(120);
        output.WriteEnum((int) ReportingStandard);
      }
      if (Assurance.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Assurance);
      }
      if (PriorReport.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(PriorReport);
      }
      if (ReportHash.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(ReportHash);
      }
      reportContext_.WriteTo(ref output, _repeated_reportContext_codec);
      propertyContexts_.WriteTo(ref output, _repeated_propertyContexts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (GRID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GRID);
      }
      if (OrganizationIdentifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrganizationIdentifier);
      }
      if (OrganizationName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrganizationName);
      }
      if (Domicile != global::CarbonCall.Metadata.ISO3166_CountryCode.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Domicile);
      }
      size += operatingCountries_.CalculateSize(_repeated_operatingCountries_codec);
      size += languages_.CalculateSize(_repeated_languages_codec);
      if (ReportType != global::CarbonCall.Metadata.ReportType.IntegratedReport) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReportType);
      }
      if (ReportIssueDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReportIssueDate);
      }
      if (reportingPeriod_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReportingPeriod);
      }
      if (ReportReplaces.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReportReplaces);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (industry_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Industry);
      }
      if (Performance.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Performance);
      }
      if (ReportFormat != global::CarbonCall.Metadata.ReportFormat.PDF) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReportFormat);
      }
      if (ReportingStandard != global::CarbonCall.Metadata.ReportingStandard.GAAP) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReportingStandard);
      }
      if (Assurance.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Assurance);
      }
      if (PriorReport.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PriorReport);
      }
      if (ReportHash.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ReportHash);
      }
      size += reportContext_.CalculateSize(_repeated_reportContext_codec);
      size += propertyContexts_.CalculateSize(_repeated_propertyContexts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Metadata other) {
      if (other == null) {
        return;
      }
      if (other.GRID.Length != 0) {
        GRID = other.GRID;
      }
      if (other.OrganizationIdentifier.Length != 0) {
        OrganizationIdentifier = other.OrganizationIdentifier;
      }
      if (other.OrganizationName.Length != 0) {
        OrganizationName = other.OrganizationName;
      }
      if (other.Domicile != global::CarbonCall.Metadata.ISO3166_CountryCode.Unknown) {
        Domicile = other.Domicile;
      }
      operatingCountries_.Add(other.operatingCountries_);
      languages_.Add(other.languages_);
      if (other.ReportType != global::CarbonCall.Metadata.ReportType.IntegratedReport) {
        ReportType = other.ReportType;
      }
      if (other.ReportIssueDate.Length != 0) {
        ReportIssueDate = other.ReportIssueDate;
      }
      if (other.reportingPeriod_ != null) {
        if (reportingPeriod_ == null) {
          ReportingPeriod = new global::CarbonCall.Metadata.ReportingPeriod();
        }
        ReportingPeriod.MergeFrom(other.ReportingPeriod);
      }
      if (other.ReportReplaces.Length != 0) {
        ReportReplaces = other.ReportReplaces;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.industry_ != null) {
        if (industry_ == null) {
          Industry = new global::CarbonCall.Metadata.Industry();
        }
        Industry.MergeFrom(other.Industry);
      }
      if (other.Performance.Length != 0) {
        Performance = other.Performance;
      }
      if (other.ReportFormat != global::CarbonCall.Metadata.ReportFormat.PDF) {
        ReportFormat = other.ReportFormat;
      }
      if (other.ReportingStandard != global::CarbonCall.Metadata.ReportingStandard.GAAP) {
        ReportingStandard = other.ReportingStandard;
      }
      if (other.Assurance.Length != 0) {
        Assurance = other.Assurance;
      }
      if (other.PriorReport.Length != 0) {
        PriorReport = other.PriorReport;
      }
      if (other.ReportHash.Length != 0) {
        ReportHash = other.ReportHash;
      }
      reportContext_.Add(other.reportContext_);
      propertyContexts_.Add(other.propertyContexts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GRID = input.ReadString();
            break;
          }
          case 18: {
            OrganizationIdentifier = input.ReadString();
            break;
          }
          case 26: {
            OrganizationName = input.ReadString();
            break;
          }
          case 32: {
            Domicile = (global::CarbonCall.Metadata.ISO3166_CountryCode) input.ReadEnum();
            break;
          }
          case 42:
          case 40: {
            operatingCountries_.AddEntriesFrom(input, _repeated_operatingCountries_codec);
            break;
          }
          case 50:
          case 48: {
            languages_.AddEntriesFrom(input, _repeated_languages_codec);
            break;
          }
          case 56: {
            ReportType = (global::CarbonCall.Metadata.ReportType) input.ReadEnum();
            break;
          }
          case 66: {
            ReportIssueDate = input.ReadString();
            break;
          }
          case 74: {
            if (reportingPeriod_ == null) {
              ReportingPeriod = new global::CarbonCall.Metadata.ReportingPeriod();
            }
            input.ReadMessage(ReportingPeriod);
            break;
          }
          case 82: {
            ReportReplaces = input.ReadString();
            break;
          }
          case 90: {
            Location = input.ReadString();
            break;
          }
          case 98: {
            if (industry_ == null) {
              Industry = new global::CarbonCall.Metadata.Industry();
            }
            input.ReadMessage(Industry);
            break;
          }
          case 106: {
            Performance = input.ReadString();
            break;
          }
          case 112: {
            ReportFormat = (global::CarbonCall.Metadata.ReportFormat) input.ReadEnum();
            break;
          }
          case 120: {
            ReportingStandard = (global::CarbonCall.Metadata.ReportingStandard) input.ReadEnum();
            break;
          }
          case 130: {
            Assurance = input.ReadString();
            break;
          }
          case 138: {
            PriorReport = input.ReadString();
            break;
          }
          case 146: {
            ReportHash = input.ReadString();
            break;
          }
          case 154: {
            reportContext_.AddEntriesFrom(input, _repeated_reportContext_codec);
            break;
          }
          case 162: {
            propertyContexts_.AddEntriesFrom(input, _repeated_propertyContexts_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            GRID = input.ReadString();
            break;
          }
          case 18: {
            OrganizationIdentifier = input.ReadString();
            break;
          }
          case 26: {
            OrganizationName = input.ReadString();
            break;
          }
          case 32: {
            Domicile = (global::CarbonCall.Metadata.ISO3166_CountryCode) input.ReadEnum();
            break;
          }
          case 42:
          case 40: {
            operatingCountries_.AddEntriesFrom(ref input, _repeated_operatingCountries_codec);
            break;
          }
          case 50:
          case 48: {
            languages_.AddEntriesFrom(ref input, _repeated_languages_codec);
            break;
          }
          case 56: {
            ReportType = (global::CarbonCall.Metadata.ReportType) input.ReadEnum();
            break;
          }
          case 66: {
            ReportIssueDate = input.ReadString();
            break;
          }
          case 74: {
            if (reportingPeriod_ == null) {
              ReportingPeriod = new global::CarbonCall.Metadata.ReportingPeriod();
            }
            input.ReadMessage(ReportingPeriod);
            break;
          }
          case 82: {
            ReportReplaces = input.ReadString();
            break;
          }
          case 90: {
            Location = input.ReadString();
            break;
          }
          case 98: {
            if (industry_ == null) {
              Industry = new global::CarbonCall.Metadata.Industry();
            }
            input.ReadMessage(Industry);
            break;
          }
          case 106: {
            Performance = input.ReadString();
            break;
          }
          case 112: {
            ReportFormat = (global::CarbonCall.Metadata.ReportFormat) input.ReadEnum();
            break;
          }
          case 120: {
            ReportingStandard = (global::CarbonCall.Metadata.ReportingStandard) input.ReadEnum();
            break;
          }
          case 130: {
            Assurance = input.ReadString();
            break;
          }
          case 138: {
            PriorReport = input.ReadString();
            break;
          }
          case 146: {
            ReportHash = input.ReadString();
            break;
          }
          case 154: {
            reportContext_.AddEntriesFrom(ref input, _repeated_reportContext_codec);
            break;
          }
          case 162: {
            propertyContexts_.AddEntriesFrom(ref input, _repeated_propertyContexts_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ReportingPeriod : pb::IMessage<ReportingPeriod>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReportingPeriod> _parser = new pb::MessageParser<ReportingPeriod>(() => new ReportingPeriod());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ReportingPeriod> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CarbonCall.Metadata.MetadataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ReportingPeriod() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ReportingPeriod(ReportingPeriod other) : this() {
      startDate_ = other.startDate_;
      endDate_ = other.endDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ReportingPeriod Clone() {
      return new ReportingPeriod(this);
    }

    /// <summary>Field number for the "start_date" field.</summary>
    public const int StartDateFieldNumber = 1;
    private string startDate_ = "";
    /// <summary>
    ///ISO 8601 date format
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StartDate {
      get { return startDate_; }
      set {
        startDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "end_date" field.</summary>
    public const int EndDateFieldNumber = 2;
    private string endDate_ = "";
    /// <summary>
    ///ISO 8601 date format4
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EndDate {
      get { return endDate_; }
      set {
        endDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ReportingPeriod);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ReportingPeriod other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartDate != other.StartDate) return false;
      if (EndDate != other.EndDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (StartDate.Length != 0) hash ^= StartDate.GetHashCode();
      if (EndDate.Length != 0) hash ^= EndDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StartDate.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StartDate);
      }
      if (EndDate.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EndDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StartDate.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StartDate);
      }
      if (EndDate.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EndDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (StartDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartDate);
      }
      if (EndDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ReportingPeriod other) {
      if (other == null) {
        return;
      }
      if (other.StartDate.Length != 0) {
        StartDate = other.StartDate;
      }
      if (other.EndDate.Length != 0) {
        EndDate = other.EndDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StartDate = input.ReadString();
            break;
          }
          case 18: {
            EndDate = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            StartDate = input.ReadString();
            break;
          }
          case 18: {
            EndDate = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Industry : pb::IMessage<Industry>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Industry> _parser = new pb::MessageParser<Industry>(() => new Industry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Industry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CarbonCall.Metadata.MetadataReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Industry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Industry(Industry other) : this() {
      prefix_ = other.prefix_;
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Industry Clone() {
      return new Industry(this);
    }

    /// <summary>Field number for the "prefix" field.</summary>
    public const int PrefixFieldNumber = 1;
    private global::CarbonCall.Metadata.IndustryCodePrefix prefix_ = global::CarbonCall.Metadata.IndustryCodePrefix.ISIC;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::CarbonCall.Metadata.IndustryCodePrefix Prefix {
      get { return prefix_; }
      set {
        prefix_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private string code_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Industry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Industry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Prefix != other.Prefix) return false;
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Prefix != global::CarbonCall.Metadata.IndustryCodePrefix.ISIC) hash ^= Prefix.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Prefix != global::CarbonCall.Metadata.IndustryCodePrefix.ISIC) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Prefix);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Prefix != global::CarbonCall.Metadata.IndustryCodePrefix.ISIC) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Prefix);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Prefix != global::CarbonCall.Metadata.IndustryCodePrefix.ISIC) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Prefix);
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Industry other) {
      if (other == null) {
        return;
      }
      if (other.Prefix != global::CarbonCall.Metadata.IndustryCodePrefix.ISIC) {
        Prefix = other.Prefix;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Prefix = (global::CarbonCall.Metadata.IndustryCodePrefix) input.ReadEnum();
            break;
          }
          case 18: {
            Code = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Prefix = (global::CarbonCall.Metadata.IndustryCodePrefix) input.ReadEnum();
            break;
          }
          case 18: {
            Code = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Metatag : pb::IMessage<Metatag>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Metatag> _parser = new pb::MessageParser<Metatag>(() => new Metatag());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Metatag> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CarbonCall.Metadata.MetadataReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Metatag() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Metatag(Metatag other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Metatag Clone() {
      return new Metatag(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Metatag);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Metatag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Metatag other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PropertyContext : pb::IMessage<PropertyContext>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PropertyContext> _parser = new pb::MessageParser<PropertyContext>(() => new PropertyContext());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PropertyContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CarbonCall.Metadata.MetadataReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PropertyContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PropertyContext(PropertyContext other) : this() {
      property_ = other.property_;
      metatags_ = other.metatags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PropertyContext Clone() {
      return new PropertyContext(this);
    }

    /// <summary>Field number for the "property" field.</summary>
    public const int PropertyFieldNumber = 1;
    private string property_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Property {
      get { return property_; }
      set {
        property_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metatags" field.</summary>
    public const int MetatagsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::CarbonCall.Metadata.Metatag> _repeated_metatags_codec
        = pb::FieldCodec.ForMessage(18, global::CarbonCall.Metadata.Metatag.Parser);
    private readonly pbc::RepeatedField<global::CarbonCall.Metadata.Metatag> metatags_ = new pbc::RepeatedField<global::CarbonCall.Metadata.Metatag>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::CarbonCall.Metadata.Metatag> Metatags {
      get { return metatags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PropertyContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PropertyContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Property != other.Property) return false;
      if(!metatags_.Equals(other.metatags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Property.Length != 0) hash ^= Property.GetHashCode();
      hash ^= metatags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Property.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Property);
      }
      metatags_.WriteTo(output, _repeated_metatags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Property.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Property);
      }
      metatags_.WriteTo(ref output, _repeated_metatags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Property.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Property);
      }
      size += metatags_.CalculateSize(_repeated_metatags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PropertyContext other) {
      if (other == null) {
        return;
      }
      if (other.Property.Length != 0) {
        Property = other.Property;
      }
      metatags_.Add(other.metatags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Property = input.ReadString();
            break;
          }
          case 18: {
            metatags_.AddEntriesFrom(input, _repeated_metatags_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Property = input.ReadString();
            break;
          }
          case 18: {
            metatags_.AddEntriesFrom(ref input, _repeated_metatags_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
